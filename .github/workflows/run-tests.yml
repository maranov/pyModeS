name: tests

on:
  push:
  pull_request_target:
  workflow_dispatch:

env:
  POETRY_VERSION: "1.3.1"

jobs:
  # TODO: Original job + an AArch64-specific job.
  deploy_aarch64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro:
          - ubuntu22.04  # Python 3.10
          # TODO: ubuntu20.04 (Python 3.8), ideally more.
        python-version: ["3.10"]
        arch:
          - aarch64

    env:
      # TODO: Review.
      PYTHON_VERSION: ${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v2

      # TODO: Disabled for now. Re-enable and review.
      # virtualenv cache should depends on OS, Python version and `poetry.lock` (and optionally workflow files).
      # - name: Cache Packages
      #   uses: actions/cache@v3
      #   # if: ${{ !startsWith(runner.os, 'windows') }}
      #   with:
      #     path: |
      #       ~/.local
      #       .venv
      #     key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install and configure Python & Poetry
        #uses: snok/install-poetry@v1.3.3
        uses: uraimo/run-on-arch-action@v2
        # with:
        #   version:
        #   virtualenvs-create: true
        #   virtualenvs-in-project: true
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          # Not required, but speeds up builds
          githubToken: ${{ github.token }}
          # TODO: Less verbosity/progress bars (also pip/poetry).
          install: |
            apt-get -q update -y && apt-get -q install -y python3 python3-venv python3-pip
          # TODO: More caching?
          # TODO: cov-report needs to be a volume?
          run: |
            export POETRY_HOME=./.venv
            python3 -m venv $POETRY_HOME
            $POETRY_HOME/bin/pip install "poetry==${{ env.POETRY_VERSION }}"
            $POETRY_HOME/bin/poetry config virtualenvs.create true
            $POETRY_HOME/bin/poetry config virtualenvs.in-project true
            $POETRY_HOME/bin/poetry --version
            $POETRY_HOME/bin/poetry run python -c "import sys; import platform; print(sys.version); print(platform.uname().machine)"
            $POETRY_HOME/bin/poetry install
            $POETRY_HOME/bin/poetry run mypy pyModeS
            $POETRY_HOME/bin/poetry run pytest tests --cov --cov-report term-missing

      # TODO: Works?
      - name: Upload coverage to Codecov
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: codecov/codecov-action@v3
        with:
          env_vars: PYTHON_VERSION
