name: tests

on:
  push:
  pull_request_target:
  workflow_dispatch:

env:
  POETRY_VERSION: "1.3.1"

jobs:
  deploy_archs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro:
          - ubuntu22.04  # Python 3.10
        # TODO: Can install an arbitrary version?
        python-version: ["3.11"]  # TODO: "3.8", "3.9", "3.10",
        arch: [aarch64]  # TODO: none,

    env:
      PYTHON_VERSION: ${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v2

      # - name: Set up Python
      #   uses: uraimo/run-on-arch-action@v2
      #   with:
      #     run: |

      # TODO: Replace/modify.
      # virtualenv cache should depends on OS, Python version and `poetry.lock` (and optionally workflow files).
      - name: Cache Packages
        uses: actions/cache@v3
        # if: ${{ !startsWith(runner.os, 'windows') }}
        with:
          path: |
            ~/.local
            .venv
          key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      # - name: Add poetry to windows path
      #   if: "startsWith(runner.os, 'windows')"
      #   run: |
      #     echo "C:\Users\runneradmin\.local\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install and configure Python & Poetry
        #uses: snok/install-poetry@v1.3.3
        uses: uraimo/run-on-arch-action@v2
        # with:
        #   version:
        #   virtualenvs-create: true
        #   virtualenvs-in-project: true
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          # export POETRY_HOME=./.venv
          # python3 -m venv $POETRY_HOME
          # echo 'TODO: SET UP VENV'
          # $POETRY_HOME/bin/pip install "poetry==${{ env.POETRY_VERSION }}"
          # echo 'TODO: INSTALLED POETRY'
          # $POETRY_HOME/bin/poetry --version
          # Not required, but speeds up builds
          githubToken: ${{ github.token }}
          install: |
            apt-get -q update -y && apt-get -q install -y python3 python3-venv python3-pip
          # TODO: More caching
          # TODO: cov-report needs to be a volume?
          run: |
            export POETRY_HOME=./.venv
            python3 -m venv $POETRY_HOME
            $POETRY_HOME/bin/pip install "poetry==${{ env.POETRY_VERSION }}"
            $POETRY_HOME/bin/poetry --version
            $POETRY_HOME/bin/poetry run python -c "import sys; import platform; print(sys.version); print(platform.uname().machine)"
            $POETRY_HOME/bin/poetry install
            $POETRY_HOME/bin/poetry run mypy pyModeS
            $POETRY_HOME/bin/poetry run pytest tests --cov --cov-report term-missing

      # - name: Display Python version
      #   uses: uraimo/run-on-arch-action@v2
      #   # TODO: if: ${{ runner.arch == 'none' || startsWith(runner.os, 'linux') }}
      #   with:
      #     run: poetry run python -c "import sys; import platform; print(sys.version); print(platform.uname().machine)"

      # - name: Install dependencies
      #   uses: uraimo/run-on-arch-action@v2
      #   # TODO: if: ${{ runner.arch == 'none' || startsWith(runner.os, 'linux') }}
      #   with:
      #     run: |
      #       poetry install

      # - name: Type checking
      #   uses: uraimo/run-on-arch-action@v2
      #   # TODO: if: ${{ runner.arch == 'none' || startsWith(runner.os, 'linux') }}
      #   with:
      #     run: |
      #       poetry run mypy pyModeS

      # - name: Run tests
      #   uses: uraimo/run-on-arch-action@v2
      #   # TODO: if: ${{ runner.arch == 'none' || startsWith(runner.os, 'linux') }}
      #   with:
      #     run: |
      #       poetry run pytest tests --cov --cov-report term-missing

      - name: Upload coverage to Codecov
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: codecov/codecov-action@v3
        with:
          env_vars: PYTHON_VERSION
